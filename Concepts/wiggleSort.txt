class Solution {
    public void swap(int nums[],int i,int j){
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    public int partition(int nums[],int low,int high){
        Random random = new Random();
        int pivot = random.nextInt(high - low + 1)+low;
        swap(nums,pivot,high);
        int index = low;
        for(int i =low;i<high;i++){
            if(nums[i]<nums[high]){
                swap(nums,i,index);
                index++;
            }
        }
        swap(nums,index,high);
        return index;
    }
    public int quickSelect(int nums[],int low,int high,int k){
        int pi = partition(nums,low,high);
        if(pi == k)
            return pi;
        if(pi<k)
            return quickSelect(nums,pi+1,high,k);
        else
            return quickSelect(nums,low,pi-1,k);
    }
    public void wiggleSort(int[] nums) {
        int n = nums.length;
        int k = quickSelect(nums,0,n-1,(n-1)/2);
        int median = nums[k];
        System.out.println(nums[k]);
        int high = 1;
        int small = (n%2==0)?n-2 : n-1;
        int index =0 ;
        while(index<n){
            if(nums[index]< median && (index < small || index>=small && index%2!=0)){
                swap(nums,index,small);
                small-=2;
            }else if(nums[index]>median && (index > high || high>=index && index%2==0)){
                swap(nums,index,high);
                high+=2;
            }
            else
                index++;
        }
    }
}